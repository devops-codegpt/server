// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\conversation.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	memory "github.com/devops-codegpt/server/internal/llm/memory"
	openaiclient "github.com/devops-codegpt/server/internal/llm/model/openai/openaiclient"
	models "github.com/devops-codegpt/server/models"
	request "github.com/devops-codegpt/server/request"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockConversationService is a mock of ConversationService interface.
type MockConversationService struct {
	ctrl     *gomock.Controller
	recorder *MockConversationServiceMockRecorder
}

// MockConversationServiceMockRecorder is the mock recorder for MockConversationService.
type MockConversationServiceMockRecorder struct {
	mock *MockConversationService
}

// NewMockConversationService creates a new mock instance.
func NewMockConversationService(ctrl *gomock.Controller) *MockConversationService {
	mock := &MockConversationService{ctrl: ctrl}
	mock.recorder = &MockConversationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationService) EXPECT() *MockConversationServiceMockRecorder {
	return m.recorder
}

// DeleteByIds mocks base method.
func (m *MockConversationService) DeleteByIds(ids []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIds", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIds indicates an expected call of DeleteByIds.
func (mr *MockConversationServiceMockRecorder) DeleteByIds(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIds", reflect.TypeOf((*MockConversationService)(nil).DeleteByIds), ids)
}

// FeedbackMessage mocks base method.
func (m *MockConversationService) FeedbackMessage(req *request.MessageFeedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedbackMessage", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeedbackMessage indicates an expected call of FeedbackMessage.
func (mr *MockConversationServiceMockRecorder) FeedbackMessage(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedbackMessage", reflect.TypeOf((*MockConversationService)(nil).FeedbackMessage), req)
}

// FindById mocks base method.
func (m *MockConversationService) FindById(id string) (*models.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*models.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockConversationServiceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockConversationService)(nil).FindById), id)
}

// FindConversations mocks base method.
func (m *MockConversationService) FindConversations(username string, req *request.ConversationList) ([]*models.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConversations", username, req)
	ret0, _ := ret[0].([]*models.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConversations indicates an expected call of FindConversations.
func (mr *MockConversationServiceMockRecorder) FindConversations(username, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConversations", reflect.TypeOf((*MockConversationService)(nil).FindConversations), username, req)
}

// RunBase mocks base method.
func (m *MockConversationService) RunBase(prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunBase", prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBase indicates an expected call of RunBase.
func (mr *MockConversationServiceMockRecorder) RunBase(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBase", reflect.TypeOf((*MockConversationService)(nil).RunBase), prompt)
}

// RunConversation mocks base method.
func (m *MockConversationService) RunConversation(username string, req *request.ConversationRun, callback openaiclient.Callback) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunConversation", username, req, callback)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunConversation indicates an expected call of RunConversation.
func (mr *MockConversationServiceMockRecorder) RunConversation(username, req, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConversation", reflect.TypeOf((*MockConversationService)(nil).RunConversation), username, req, callback)
}

// RunConversationWS mocks base method.
func (m *MockConversationService) RunConversationWS(command, prompt string, buffer *memory.Buffer, callback openaiclient.Callback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunConversationWS", command, prompt, buffer, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunConversationWS indicates an expected call of RunConversationWS.
func (mr *MockConversationServiceMockRecorder) RunConversationWS(command, prompt, buffer, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConversationWS", reflect.TypeOf((*MockConversationService)(nil).RunConversationWS), command, prompt, buffer, callback)
}
