// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\llm.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/devops-codegpt/server/models"
	request "github.com/devops-codegpt/server/request"
	gomock "go.uber.org/mock/gomock"
)

// MockLLMService is a mock of LLMService interface.
type MockLLMService struct {
	ctrl     *gomock.Controller
	recorder *MockLLMServiceMockRecorder
}

// MockLLMServiceMockRecorder is the mock recorder for MockLLMService.
type MockLLMServiceMockRecorder struct {
	mock *MockLLMService
}

// NewMockLLMService creates a new mock instance.
func NewMockLLMService(ctrl *gomock.Controller) *MockLLMService {
	mock := &MockLLMService{ctrl: ctrl}
	mock.recorder = &MockLLMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMService) EXPECT() *MockLLMServiceMockRecorder {
	return m.recorder
}

// FindAllLLMs mocks base method.
func (m *MockLLMService) FindAllLLMs(req *request.LLMList) ([]*models.LLM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLLMs", req)
	ret0, _ := ret[0].([]*models.LLM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLLMs indicates an expected call of FindAllLLMs.
func (mr *MockLLMServiceMockRecorder) FindAllLLMs(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLLMs", reflect.TypeOf((*MockLLMService)(nil).FindAllLLMs), req)
}
