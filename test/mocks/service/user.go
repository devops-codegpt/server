// Code generated by MockGen. DO NOT EDIT.
// Source: .\service\user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/devops-codegpt/server/models"
	request "github.com/devops-codegpt/server/request"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AuthByUserAndPassword mocks base method.
func (m *MockUserService) AuthByUserAndPassword(username, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthByUserAndPassword", username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuthByUserAndPassword indicates an expected call of AuthByUserAndPassword.
func (mr *MockUserServiceMockRecorder) AuthByUserAndPassword(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthByUserAndPassword", reflect.TypeOf((*MockUserService)(nil).AuthByUserAndPassword), username, password)
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(req *request.UserCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), req)
}

// FindAllUsers mocks base method.
func (m *MockUserService) FindAllUsers(req *request.UserList) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUsers", req)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUsers indicates an expected call of FindAllUsers.
func (mr *MockUserServiceMockRecorder) FindAllUsers(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUsers", reflect.TypeOf((*MockUserService)(nil).FindAllUsers), req)
}

// FindUserByName mocks base method.
func (m *MockUserService) FindUserByName(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByName", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByName indicates an expected call of FindUserByName.
func (mr *MockUserServiceMockRecorder) FindUserByName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByName", reflect.TypeOf((*MockUserService)(nil).FindUserByName), username)
}
